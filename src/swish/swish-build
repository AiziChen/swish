#!/usr/bin/env swish

;;; Copyright 2018 Beckman Coulter, Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use, copy,
;;; modify, merge, publish, distribute, sublicense, and/or sell copies
;;; of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;;; DEALINGS IN THE SOFTWARE.

(define verbosity (make-parameter 0))

(define help-sections '(all details examples))

(define shared-cli
  (cli-specs
   ["verbose" -v count "show more compiler messages"]
   ["output-file" -o (string "<output>") "write output to <output>"]
   ["libdirs" -L (list "<libdir>") "add <libdir> to library-directories"]
   ["srcdirs" -s (list "<srcdir>") "add <srcdir> to source-directories"]
   ["source-file" (string "<source>") "source filename"]
   ["help" -h --help (list "[<section>]" ...)
    (format "display help, <section>={~{~a~^|~}}" help-sections)]))

(define library-cli
  (cli-specs
   ["as-library" --library bool "make a compiled library"
    (usage show req)]))

(define app-cli
  (cli-specs
   ["boot-files" -b (list "<boot-file>")
    "make stand-alone application including <boot-file>"]
   ["libs-visible" --libs-visible bool
    "make imported libraries visible to eval"]
   ["rt-libs" --rtlib (list "<lib>")
    "add compiled library to stand-alone boot file"]))

(define swish-lib?
  (let ([libs (filter (lambda (lib) (match lib [(swish . ,_) #t] [,_ #f])) (library-list))])
    (lambda (lib)
      (member lib libs))))

(define swish-libdir (path-parent (osi_get_executable_path)))

(define (system-libdir swish-wpo?)
  (path-combine swish-libdir (if swish-wpo? "wpo" "lib")))

(define swish-library-filename
  (get-real-path (path-combine swish-libdir "swish.library")))

(define (library-setup swish-wpo? libdirs)
  (library-directories (cons (system-libdir swish-wpo?) libdirs))
  (when (> (verbosity) 1)
    (printf "Library directories:\n~{ ~s\n~}" (library-directories))))

(define who (path-last (car (command-line))))

(define (fail fmt . args) (apply errorf who fmt args))

(define (wrap indent . texts)
  (wrap-text (current-output-port)
    (- (help-wrap-width) indent) indent indent (join texts #\space)))

(define-syntax example
  (syntax-rules ()
    [(_ (call ...) text ...)
     (begin
       (wrap 2 call ... "\n")
       (wrap 4 text ... "\n"))]))

(define-syntax any-sections
  (syntax-rules ()
    [(_ requested [(key ...) body ...] ...)
     (let ([sections requested])
       (define thunks
         (remq #f
           (list
            (and (ormap (lambda (x) (memq x sections)) '(key ...))
                 (lambda () body ...))
            ...)))
       (do ([ps thunks (cdr ps)] [sep "" "\n"]) ((null? ps))
         (display sep)
         ((car ps))))]))

(define (list-item item . texts)
  (printf "~4@a " item)
  (wrap-text (current-output-port) (- (help-wrap-width) 6) 0 5 (join texts #\space))
  (newline))

(define (usage short? sections ht)
  (define selected
    (cond
     [(pair? sections) sections]
     [short? '(usage)]
     [else '(usage help)]))
  (any-sections selected
    [(all usage)
     (display-usage "Usage:" who (append shared-cli app-cli))
     (display-usage "   or:" who (append shared-cli library-cli))]
    [(all help)
     (when ht (hashtable-delete! ht "help"))
     (display-options shared-cli ht)
     (printf "\n  Application target options:\n")
     (display-options app-cli ht)
     (printf "\n  Library target options:\n")
     (display-options library-cli ht)]
    [(all details)
     (define csvNNN.dll
       (format "csv~{~a~}.dll" (call-with-values scheme-version-number list)))
     (wrap 0
       who "can make a stand-alone application, a linked application, or a compiled library."
       "By default," who "creates a linked application.\n"
       "\n"
       "To compile a library, specify --library. The resulting compiled library may"
       "be used as a" who "--rtlib argument.\n"
       "\n"
       "To create a stand-alone application, specify -b and provide a base boot file."
       who "creates a stand-alone application"
       "by copying the" software-internal-name "executable to <out-file>"
       "and creating a boot file <out-file>.boot containing each"
       (format "-b~aboot-file" #\240)
       "in order, the run-time libraries included via --rtlib,"
       "the libraries required by source-fn, and the compiled code"
       "for source-fn.\n"
       "\n"
       "When run, a stand-alone application:\n")
     (list-item "1." "loads Chez Scheme's" csvNNN.dll "[Windows only],")
     (list-item "2." "loads the application boot file, then")
     (list-item "3." "invokes a custom scheme-start handler described below.\n")
     (wrap 0
       "To create a linked application, omit the -b option.\n\n"
       "When run, a linked application calls" software-internal-name "to:\n")
     (list-item "1." "load Chez Scheme's" csvNNN.dll "[Windows only],")
     (list-item "2." "load Chez Scheme's petite.boot and scheme.boot,")
     (list-item "3." "load the standard" software-internal-name "boot file, then")
     (list-item "4." "invoke the" software-internal-name "scheme-start handler.\n")
     (wrap 0 "In either case, the scheme-start handler:\n")
     (list-item "1." "sets app:name, command-line, and command-line-arguments")
     (list-item "2." "installs an exception handler that prints app:name, if non-false, and")
     (list-item "3." "invokes the compiled application code.")]
    [(all examples)
     (printf "Examples:\n")
     (newline)
     (example (who "-o foo -b petite foo.ss")
       "builds a stand-alone \"foo\" executable from \"foo.ss\""
       "using the same petite.boot that swish uses.\n")
     (example (who "-o foo -b petite -b scheme foo.ss")
       "builds a stand-alone \"foo\" executable from \"foo.ss\" using"
       "the same petite.boot and scheme.boot that swish uses."
       "If we specified only -b scheme, the resulting foo.boot would"
       "not be truly stand-alone, since scheme.boot requires petite.boot.\n")
     (example (who "-o foo -b petite -b scheme --rtlib swish foo.ss")
       "builds a stand-alone \"foo\" executable from \"foo.ss\" using the"
       "same petite.boot and scheme.boot that swish uses and makes the"
       "standard swish libraries available at run time, so that \"foo\""
       "can compile code that uses those libraries.\n")
     (example (who "-o foo.so --library foo.ss")
       "compiles the \"foo.ss\" library to \"foo.so\" and generates"
       "\"foo.wpo\" for use by whole-program optimization.")])
  (let ([invalid (fold-right remq sections help-sections)])
    (unless (null? invalid)
      (fail "unrecognized help section~p:~{ ~a~}" (length invalid) invalid)))
  (exit 0))

(define (parse-library lib)
  (parameterize ([library-directories lib])
    (library-directories)))

;; create tmp file:
;;  - on the same filesystem as basis, else rename-path will fail
;;  - with known extension, since compile-whole-program replaces
;;    extension with .wpo
(define (tmp-filename basis)
  (format "~a-~36r.tmp" (path-root basis)
    (bytevector-uint-ref (osi_make_uuid) 0 'little 16)))

(define (change-extension fn new-ext)
  (string-append (path-root fn) new-ext))

(define (copy ip op)
  (define buflen (expt 2 16))
  (define buf (make-bytevector buflen))
  (let cp ()
    (let ([n (get-bytevector-n! ip buf 0 buflen)])
      (unless (eof-object? n)
        (put-bytevector op buf 0 n)
        (cp)))))

(define (copy-to output-fn . input-fn*)
  ;; open-file applies mode #o777 only when creating the file, so first remove
  (rm-f output-fn)
  (let ([op (open-file output-fn (+ O_WRONLY O_CREAT) #o777 'binary-output)])
    (on-exit (close-port op)
      (for-each
       (lambda (input-fn)
         (let ([ip (open-file input-fn O_RDONLY 0 'binary-input)])
           (on-exit (close-port ip)
             (copy ip op))))
       input-fn*))))

(define (rm-f filename)
  (catch (remove-file filename)))

(define (do-compile source-fn output-fn libs-visible? swish-wpo? as-library?)
  (let ([tmp (tmp-filename source-fn)])
    (on-exit (rm-f tmp)
      (when (> (verbosity) 0) (printf "compiling ~a\n" (opt "source-file")))
      (if as-library?
          (compile-library source-fn tmp)
          (compile-program source-fn tmp))
      (let* ([wpo-file (change-extension tmp ".wpo")]
             [libs
              (if as-library?
                  (compile-whole-library wpo-file output-fn)
                  (compile-whole-program wpo-file output-fn libs-visible?))]
             [missing-libs
              ;; Stand-alone application should have found all required non-swish libraries.
              ;; If swish libraries are incorporated via whole-program optimization,
              ;; then we must also have found the those libraries.
              ;; Dependent applications can use swish libraries included in runtime,
              ;; as can stand-alone applications that explicitly specify --rtlib swish.
              (if swish-wpo?
                  libs
                  (remp swish-lib? libs))])
        (if as-library?
            (rename-path wpo-file (change-extension output-fn ".wpo"))
            (rm-f wpo-file))
        missing-libs))))

(define boot-file-map
  (let ([cache #f])
    (lambda ()
      (unless cache
        (set! cache (build-boot-file-map)))
      cache)))

(define (build-boot-file-map)
  (let-values ([(to-stdin from-stdout from-stderr os-pid)
                (spawn-os-process (osi_get_executable_path) '("--verbose") self)])
    (close-port to-stdin)
    (let ([from-stderr (binary->utf8 from-stderr)])
      (let lp ([als '()])
        (let ([line (get-line from-stderr)])
          (if (eof-object? line)
              als
              (lp
               (match (pregexp-match "^trying (.*)\\.\\.\\.opened\r?$" line)
                 [(,_ ,fn)
                  (cons (cons (path-last fn) fn) als)]
                 [,_ als]))))))))

(define (resolve-boot-file boot)
  (cond
   [(regular-file? boot) boot]
   [(assoc boot (boot-file-map)) => cdr]
   [(assoc (string-append boot ".boot") (boot-file-map)) => cdr]
   [else (fail "cannot resolve boot file ~a" boot)]))

(define (resolve-rt-lib rt-lib)
  (cond
   [(regular-file? rt-lib) rt-lib]
   [(equal? rt-lib "swish") swish-library-filename]
   [else (fail "cannot resolve --rtlib ~s" rt-lib)]))

(define (resolve-missing-libs missing-libs)
  (let ([ht (make-hashtable string-hash string=?)])
    (for-each
     (lambda (lib)
       (match (catch (library-object-filename lib))
         [#(EXIT ,reason) (errorf who "cannot resolve missing library ~s" lib)]
         [,filename
          (hashtable-update! ht (get-real-path filename)
            (lambda (x) (cons lib x))
            '())]))
     missing-libs)
    (let-values ([(keys vals) (hashtable-entries ht)])
      (unless (equal? vals '#())
        (printf "Added without whole-program optimization:~{ ~s~}\n"
          (apply append (vector->list vals))))
      (vector->list keys))))

(define (show-files app-boot boot-files rt-libs other-libs source-fn)
  (when (> (verbosity) 1)
    (printf "making application~@[ boot file ~s~] from:" app-boot)
    (printf "~@[~{\n-b      ~a~}~]" boot-files)
    (printf "~{\n--rtlib ~a~}" rt-libs)
    (printf "~{\n        ~a~}" other-libs)
    (printf "\n        ~a\n" source-fn)))

(define (try-parse)
  (define problem #f)
  (define lib-opt
    (parse-command-line-arguments
     (append shared-cli library-cli)
     (command-line-arguments)
     (lambda x (unless problem (set! problem x)))))
  (if (lib-opt "as-library")
      (if problem
          (apply fail problem)
          lib-opt)
      (parse-command-line-arguments (append shared-cli app-cli))))

(define opt (try-parse))

(cond
 [(opt "srcdirs") =>
  (lambda (srcdirs)
    (source-directories (append srcdirs (source-directories))))])

(cond
 [(zero? (hashtable-size (opt))) (usage #t '() #f)]
 [(opt "help") =>
  (lambda (sections)
    (usage #f (map string->symbol sections) (opt)))]
 [else
  (let ([source-fn (opt "source-file")]
        [output-fn (opt "output-file")]
        [as-library? (hashtable-ref (opt) "as-library" #f)]
        [libdirs (fold-right
                  (lambda (x acc)
                    (append (parse-library x) acc))
                  (library-directories)
                  (or (opt "libdirs") '()))])
    (verbosity (or (opt "verbose") 0))
    (import-notify (> (verbosity) 2))
    ;; We add ".wpo" variants to the front of library-extensions so that the
    ;; expander forces library compilation if a ".wpo" file exists and is
    ;; older than the source file, while still falling back on the usual
    ;; object file if the ".wpo" file is not wanted, e.g., for the --rtlib
    ;; case.  When the expander calls compile-library-handler, we restore the
    ;; ".so" extension so that compile-library can build both the ".so" file
    ;; and its ".wpo" by-product without conflict.
    (generate-wpo-files #t)
    (compile-imported-libraries #t)
    (compile-file-message #f)
    (compile-library-handler
     (lambda (source dest)
       (when (> (verbosity) 0) (printf "compiling ~a\n" source))
       (compile-library source (change-extension dest ".so"))))
    (library-extensions
     (append
      (map (lambda (x)
             (match-let* ([(,src . ,obj) x])
               (cons src (change-extension obj ".wpo"))))
        (library-extensions))
      (library-extensions)))
    (cond
     [(not source-fn) (fail "requires source filename")]
     [(not output-fn) (fail "requires output filename")]
     [as-library?
      (library-setup #f libdirs)
      (match (do-compile source-fn output-fn #f #f as-library?)
        [() (void)]
        [,missing-libs
         (printf "These libraries must be provided at run time:~{ ~s~}\n"
           missing-libs)])]
     [else
      (let ([tmp-src (tmp-filename source-fn)])
        (define boot-files (or (opt "boot-files") '()))
        (define stand-alone? (not (null? boot-files)))
        (define libs-visible? (opt "libs-visible"))
        (define rt-libs
          (map (lambda (x) (get-real-path (resolve-rt-lib x)))
            (or (opt "rt-libs") '())))
        ;; generate wrapper that invokes content of source-fn
        (with-output-to-file tmp-src
          (lambda ()
            (for-each pretty-print
              `((import (scheme) (swish imports))
                (define-syntax (include-source x)
                  (syntax-case x ()
                    [(k fn)
                     (datum->syntax #'k
                       `(begin
                          ,@(with-sfd-source-offset (datum fn) get-datum/annotations-all)))]))
                (let ()
                  (define (run args)
                    (let ([who (vector-ref (osi_get_argv) ,(if stand-alone? 0 1))])
                      (app:name who)
                      (command-line (cons who args))
                      (command-line-arguments args)
                      (with-exception-handler app-exception-handler
                        (lambda () (include-source ,source-fn)))))
                  ,(if stand-alone?
                       `(scheme-start
                         (let ([orig (scheme-start)])
                           (lambda args
                             (scheme-start orig)
                             (run args))))
                       `(run (command-line-arguments))))))))
        (on-exit (rm-f tmp-src)
          (cond
           [stand-alone?
            ;; Add location of swish system .wpo files only if we're building a
            ;; stand-alone application (boot-files non-empty).
            (let* ([boot-files (map resolve-boot-file boot-files)]
                   [swish-wpo?
                    (or (null? rt-libs)
                        ;; don't use wpo for swish library if we're including it as a
                        ;; run-time library, else we could duplicate code
                        (not (member swish-library-filename rt-libs)))]
                   [_ (library-setup swish-wpo? libdirs)]
                   [other-libs
                    ;; load-compiled-from-port fails if given compressed
                    ;; - note that (port-file-compressed! ip) works only for file ports,
                    ;;   and does not work for bytevector-input-ports
                    ;; - not a problem because compile-to-file will compress us later
                    (parameterize ([compile-compressed #f])
                      (resolve-missing-libs
                       (do-compile tmp-src output-fn libs-visible? swish-wpo? as-library?)))]
                   [app-boot (change-extension output-fn ".boot")]
                   [compiled-code
                    (let ([ip (open-file output-fn O_RDONLY 0 'binary-input)])
                      (on-exit (close-port ip)
                        (get-bytevector-all ip)))])
              (show-files app-boot boot-files rt-libs other-libs source-fn)
              ;; avoid using swish library code within the expression we compile
              (compile-to-file
               `((load-compiled-from-port (open-bytevector-input-port ',compiled-code)))
               output-fn)
              (apply make-boot-file app-boot '()
                (append boot-files rt-libs other-libs (list output-fn)))
              (copy-to output-fn (osi_get_executable_path)))]
           [else
            (library-setup #f libdirs)
            (let* ([other-libs
                    (resolve-missing-libs
                     (do-compile tmp-src output-fn libs-visible? #f as-library?))]
                   [hashbang
                    (let ([ip (open-file source-fn O_RDONLY 0 'binary-input)])
                      (on-exit (close-port ip)
                        (let ([end (get-source-offset ip)])
                          (and (> end 0)
                               (begin (file-position ip 0) #t)
                               (get-bytevector-n ip end)))))]
                   [tmp (tmp-filename output-fn)]
                   [ip (open-file output-fn O_RDONLY 0 'binary-input)]
                   [op (open-file tmp (+ O_WRONLY O_CREAT O_APPEND) #o777 'binary-output)])
              (on-exit (begin (close-port ip) (close-port op))
                (show-files #f #f rt-libs other-libs source-fn)
                (put-bytevector op (or hashbang (string->utf8 "#!/usr/bin/env swish\n")))
                (for-each
                 (lambda (rt-lib)
                   (unless (equal? rt-lib swish-library-filename)
                     (let ([ip (open-file rt-lib O_RDONLY 0 'binary-input)])
                       (on-exit (close-port ip)
                         (copy ip op)))))
                 (append rt-libs other-libs))
                (copy ip op))
              (rename-path tmp output-fn))])))]))])
