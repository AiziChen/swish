.PHONY: all clean platform-clean ready reminders

ready: io-constants.ss clibs git.revision

CORE := ../../bin/swish${EXESUFFIX} ../../bin/swish.boot ../../bin/swish.library ../../bin/swish-build
AUXLIB := ../../lib/swish/mat.so ../../lib/swish/profile.so ../../lib/swish/testing.so

all: ready ${CORE} ${AUXLIB} ${REMINDERS}

# force evaluation
.PHONY: git.revision
git.revision:
	@git describe --always --exclude='*' --abbrev=40 --dirty > git.revision.tmp
	@if cmp --quiet git.revision git.revision.tmp; then \
	  rm git.revision.tmp; \
	else \
	  mv git.revision.tmp git.revision; touch software-info.ss; echo "git-revision changed"; \
	fi

io-constants.ss: io-constants${EXESUFFIX}
	./$< > $@

../../libuv/include:
	git submodule update --init ../../libuv
	git clone https://chromium.googlesource.com/external/gyp ../../libuv/build/gyp

../../bin/swish.boot: boot.ss ../../bin/swish.library
	@echo \
	'(reset-handler abort)' \
	'(make-boot-file "$@" (quote ("scheme" "petite")) "../../bin/swish.library" "boot.ss")' \
	| "${SCHEME}" -q ../../bin/swish.library

../../bin/swish.library: *.ss
	find ../../lib -name '*.so' -delete
	@echo \
	'(reset-handler abort)' \
	'(generate-wpo-files #t)' \
	'(compile-imported-libraries #t)' \
	'(cd "..")'\
	'(import (swish imports))' \
	'(compile-whole-library "../lib/swish/imports.wpo" "../bin/swish.library")' \
	| "${SCHEME}" -q --libdirs "${LIBDIRS}"

../../lib/swish/%.so: %.ss ../../bin/swish${EXESUFFIX} ../../bin/swish.library
	@echo \
	'(reset-handler abort)' \
	'(generate-wpo-files #t)' \
	'(compile-imported-libraries #t)' \
	'(cd "..")'\
	'(library-directories "${LIBDIRS}")' \
	'(import (swish $(<:.ss=)))' \
	| ../../bin/swish${EXESUFFIX} -q

clean: platform-clean
	rm -f git.revision
	rm -f io-constants.ss
	rm -f ../*.ss.html ../mat-report.html ../server-profile.html
	rm -f *.mo *.ms.html *.ss.html

.PHONY: install install-bin install-check install-doc
INSTLIBDIR := ${INSTALLROOT}/lib/swish${SWISH_VERSION}/${MACHINE_TYPE}
INSTWEBDIR := ${INSTALLROOT}/lib/swish${SWISH_VERSION}/web
INSTDOCDIR := ${INSTALLROOT}/share/doc/swish${SWISH_VERSION}

install: install-doc install-bin

install-check:
ifeq (,${INSTALLROOT})
	$(error INSTALLROOT is not set)
endif

install-doc: install-check
	install --directory ${INSTDOCDIR}
	install ../../LICENSE ${INSTDOCDIR}
	install ../../NOTICE ${INSTDOCDIR}
	install ../../doc/swish.pdf ${INSTDOCDIR}

install-bin: install-check all
	install --directory ${INSTLIBDIR}
	install ../../bin/swish${EXESUFFIX} ${INSTLIBDIR}
	install ../../bin/swish-build ${INSTLIBDIR}
	install ../../bin/swish.boot ${INSTLIBDIR}
	install ../../bin/swish.library ${INSTLIBDIR}
	install ${SwishLibs} ${INSTLIBDIR}
	install --directory ${INSTALLROOT}/bin
	ln -sf ${INSTLIBDIR}/swish${EXESUFFIX} ${INSTALLROOT}/bin/swish
	ln -sf ${INSTLIBDIR}/swish-build ${INSTALLROOT}/bin/swish-build
	install --directory ${INSTLIBDIR}/lib
	cd ../../lib ; find . -type f -name '*.wpo' -exec install -D -T {} ${INSTLIBDIR}/wpo/{} \;
	cd ../../lib ; find . -type f -name '*.so' -exec install -D -T {} ${INSTLIBDIR}/lib/{} \;
	install ../../lib/swish/mat.so ${INSTLIBDIR}/lib/swish
	install ../../lib/swish/profile.so ${INSTLIBDIR}/lib/swish
	install ../../lib/swish/testing.so ${INSTLIBDIR}/lib/swish
	install --directory ${INSTWEBDIR}
	cd ../../web ; find . -type f -exec install -D -T {} ${INSTWEBDIR}/{} \;

.PHONY: mat-prereq
mat-prereq:
	make install-bin INSTALLROOT="$$(${NORMALIZE_PATH} ../../data/tmp/mat-prereq)"
